buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
        classpath 'com.ofg:uptodate-gradle-plugin:1.2.0'
        if (project.hasProperty('coverage')) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
        }
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'maven-publish'
apply plugin: 'groovy'

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "org.slf4j:slf4j-api:1.7.10"
    compile 'org.javassist:javassist:3.19.0-GA'
    compile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }

    testRuntime 'org.slf4j:slf4j-log4j12:1.7.10'
    testRuntime 'cglib:cglib-nodep:2.2.2'
    testRuntime 'org.objenesis:objenesis:1.2'

    testCompile('com.netflix.nebula:nebula-test:2.0.5') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

test {
    maxParallelForks = 8
}

bintrayUpload.dependsOn 'build'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = project.properties['bintrayUser']
    key = project.properties['bintrayKey']
    publications = ['plugin']
    pkg {
        repo = 'com-blogspot-toomuchcoding'
        name = 'gradle-test-profiler'
        desc = 'Gradle plugin that profiles your tests. Gives you a CSV file sorted by tests execution time.'
        licenses = ['Apache-2.0']
        labels = ['gradle', 'testing']
    }
}

if (project.hasProperty('coverage')) {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
    test {
        ignoreFailures = true
    }
}
